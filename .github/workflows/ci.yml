name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: 🐳 Setup Docker
      uses: docker/setup-buildx-action@v3
      
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r web/requirements.txt
        pip install pytest pytest-cov bandit safety
        
    - name: 🔍 Security audit
      run: |
        bandit -r web/ -f json -o bandit_report.json || true
        safety check --json --output safety_report.json || true
        
    - name: 🧪 Run tests
      run: |
        cd web
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html
        
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./web/coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Setup Docker
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏗️ Build Docker images
      run: |
        docker-compose build
        
    - name: 🧪 Test Docker containers
      run: |
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose down
        
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: 📦 Install linting tools
      run: |
        pip install flake8 pylint black isort
        
    - name: 🔍 Run linters
      run: |
        flake8 web/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 web/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        pylint web/ || true
        black --check web/
        isort --check-only web/
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build, lint, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏷️ Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for commit ${{ github.sha }}
          
          Changes:
          - Automated build and test
          - Security scans completed
          - Docker images built and tested
        draft: false
        prerelease: false
        
    - name: 📦 Create release assets
      run: |
        tar -czf toolbox-newgen-v${{ github.run_number }}.tar.gz \
          --exclude='.git' \
          --exclude='.venv' \
          --exclude='reports' \
          --exclude='analysis/samples' \
          --exclude='analysis/reports' \
          .
          
    - name: 📤 Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./toolbox-newgen-v${{ github.run_number }}.tar.gz
        asset_name: toolbox-newgen-v${{ github.run_number }}.tar.gz
        asset_content_type: application/gzip 