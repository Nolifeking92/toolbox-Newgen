import React from 'react';
import {
  Box,
  Paper,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  List,
  ListItem,
  ListItemText,
  Divider,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import SecurityIcon from '@mui/icons-material/Security';
import WarningIcon from '@mui/icons-material/Warning';
import CodeIcon from '@mui/icons-material/Code';

const StyledAccordion = styled(Accordion)(({ theme }) => ({
  marginBottom: theme.spacing(2),
  '&:before': {
    display: 'none',
  },
}));

interface AnalysisResultsProps {
  results: {
    strings: {
      urls: string[];
      files: string[];
      keywords: string[];
    };
    clamav: {
      infected: boolean;
      summary: string;
    };
    binwalk: {
      findings: string[];
    };
  };
}

const AnalysisResults: React.FC<AnalysisResultsProps> = ({ results }) => {
  const hasSuspiciousStrings = 
    results.strings.urls.length > 0 || 
    results.strings.files.length > 0 || 
    results.strings.keywords.length > 0;

  const getThreatLevel = () => {
    if (results.clamav.infected) return 'danger';
    if (hasSuspiciousStrings) return 'warning';
    return 'success';
  };

  const threatLevel = getThreatLevel();

  return (
    <Box sx={{ mt: 4 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
        <SecurityIcon 
          color={threatLevel as 'error' | 'warning' | 'success'} 
          sx={{ mr: 1, fontSize: 32 }} 
        />
        <Typography variant="h5" component="h2">
          Résultats de l'analyse
        </Typography>
        <Chip
          label={
            threatLevel === 'danger' ? 'Menace détectée' :
            threatLevel === 'warning' ? 'Suspect' : 'Sûr'
          }
          color={
            threatLevel === 'danger' ? 'error' :
            threatLevel === 'warning' ? 'warning' : 'success'
          }
          sx={{ ml: 2 }}
        />
      </Box>

      <StyledAccordion defaultExpanded>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>
            <CodeIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
            Chaînes suspectes
          </Typography>
        </AccordionSummary>
        <AccordionDetails>
          <List>
            {results.strings.urls.length > 0 && (
              <>
                <ListItem>
                  <ListItemText
                    primary="URLs et commandes"
                    secondary={
                      <Box component="div" sx={{ mt: 1 }}>
                        {results.strings.urls.map((url, index) => (
                          <Chip
                            key={index}
                            label={url}
                            color="warning"
                            size="small"
                            sx={{ mr: 1, mb: 1 }}
                          />
                        ))}
                      </Box>
                    }
                  />
                </ListItem>
                <Divider />
              </>
            )}

            {results.strings.files.length > 0 && (
              <>
                <ListItem>
                  <ListItemText
                    primary="Fichiers et chemins suspects"
                    secondary={
                      <Box component="div" sx={{ mt: 1 }}>
                        {results.strings.files.map((file, index) => (
                          <Chip
                            key={index}
                            label={file}
                            color="warning"
                            size="small"
                            sx={{ mr: 1, mb: 1 }}
                          />
                        ))}
                      </Box>
                    }
                  />
                </ListItem>
                <Divider />
              </>
            )}

            {results.strings.keywords.length > 0 && (
              <ListItem>
                <ListItemText
                  primary="Mots-clés suspects"
                  secondary={
                    <Box component="div" sx={{ mt: 1 }}>
                      {results.strings.keywords.map((keyword, index) => (
                        <Chip
                          key={index}
                          label={keyword}
                          color="warning"
                          size="small"
                          sx={{ mr: 1, mb: 1 }}
                        />
                      ))}
                    </Box>
                  }
                />
              </ListItem>
            )}
          </List>
        </AccordionDetails>
      </StyledAccordion>

      <StyledAccordion>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>
            <SecurityIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
            Résultats ClamAV
          </Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Typography
            color={results.clamav.infected ? 'error' : 'success'}
            sx={{ mb: 2 }}
          >
            {results.clamav.infected ? (
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <WarningIcon sx={{ mr: 1 }} />
                Menace détectée !
              </Box>
            ) : (
              'Aucune menace détectée'
            )}
          </Typography>
          <Typography variant="body2" component="pre" sx={{ whiteSpace: 'pre-wrap' }}>
            {results.clamav.summary}
          </Typography>
        </AccordionDetails>
      </StyledAccordion>

      {results.binwalk.findings.length > 0 && (
        <StyledAccordion>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography>Résultats Binwalk</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <List>
              {results.binwalk.findings.map((finding, index) => (
                <ListItem key={index}>
                  <ListItemText primary={finding} />
                </ListItem>
              ))}
            </List>
          </AccordionDetails>
        </StyledAccordion>
      )}
    </Box>
  );
};

export default AnalysisResults; 