import React, { useEffect, useState } from 'react';
import {
  Box,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Typography,
  Chip,
  Tooltip,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import VisibilityIcon from '@mui/icons-material/Visibility';
import DeleteIcon from '@mui/icons-material/Delete';
import SecurityIcon from '@mui/icons-material/Security';

const StyledListItem = styled(ListItem)(({ theme }) => ({
  marginBottom: theme.spacing(1),
  borderRadius: theme.shape.borderRadius,
  border: `1px solid ${theme.palette.divider}`,
}));

interface AnalysisRecord {
  id: string;
  filename: string;
  timestamp: string;
  threatLevel: 'safe' | 'warning' | 'danger';
  summary: string;
}

const AnalysisHistory: React.FC = () => {
  const [history, setHistory] = useState<AnalysisRecord[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchHistory();
  }, []);

  const fetchHistory = async () => {
    try {
      const response = await fetch('/api/analysis-history');
      const data = await response.json();
      setHistory(data);
    } catch (error) {
      console.error('Error fetching history:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    try {
      await fetch(`/api/analysis-history/${id}`, {
        method: 'DELETE',
      });
      setHistory(history.filter(item => item.id !== id));
    } catch (error) {
      console.error('Error deleting record:', error);
    }
  };

  const handleView = (id: string) => {
    // TODO: Implémenter la visualisation détaillée
    console.log('View analysis:', id);
  };

  const getThreatLevelColor = (level: string) => {
    switch (level) {
      case 'danger':
        return 'error';
      case 'warning':
        return 'warning';
      default:
        return 'success';
    }
  };

  if (loading) {
    return <Typography>Chargement de l'historique...</Typography>;
  }

  if (history.length === 0) {
    return <Typography>Aucune analyse précédente</Typography>;
  }

  return (
    <List>
      {history.map((record) => (
        <StyledListItem key={record.id}>
          <ListItemText
            primary={
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <SecurityIcon
                  color={getThreatLevelColor(record.threatLevel) as 'error' | 'warning' | 'success'}
                  sx={{ mr: 1 }}
                />
                {record.filename}
                <Chip
                  size="small"
                  label={
                    record.threatLevel === 'danger' ? 'Menace' :
                    record.threatLevel === 'warning' ? 'Suspect' : 'Sûr'
                  }
                  color={getThreatLevelColor(record.threatLevel) as 'error' | 'warning' | 'success'}
                  sx={{ ml: 1 }}
                />
              </Box>
            }
            secondary={
              <>
                <Typography variant="body2" color="textSecondary">
                  {new Date(record.timestamp).toLocaleString()}
                </Typography>
                <Typography variant="body2" color="textSecondary" noWrap>
                  {record.summary}
                </Typography>
              </>
            }
          />
          <ListItemSecondaryAction>
            <Tooltip title="Voir les détails">
              <IconButton edge="end" onClick={() => handleView(record.id)} sx={{ mr: 1 }}>
                <VisibilityIcon />
              </IconButton>
            </Tooltip>
            <Tooltip title="Supprimer">
              <IconButton edge="end" onClick={() => handleDelete(record.id)}>
                <DeleteIcon />
              </IconButton>
            </Tooltip>
          </ListItemSecondaryAction>
        </StyledListItem>
      ))}
    </List>
  );
};

export default AnalysisHistory; 