from fastapi import APIRouter, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
from typing import List
import os
import json
import subprocess
import uuid
from datetime import datetime

router = APIRouter()

ANALYSIS_DIR = "analysis"
SAMPLES_DIR = os.path.join(ANALYSIS_DIR, "samples")
REPORTS_DIR = os.path.join(ANALYSIS_DIR, "reports")
HISTORY_FILE = os.path.join(ANALYSIS_DIR, "history.json")

# Création des dossiers nécessaires
os.makedirs(SAMPLES_DIR, exist_ok=True)
os.makedirs(REPORTS_DIR, exist_ok=True)

def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, 'r') as f:
            return json.load(f)
    return []

def save_history(history):
    with open(HISTORY_FILE, 'w') as f:
        json.dump(history, f)

def parse_analysis_results(report_path):
    with open(report_path, 'r') as f:
        content = f.read()
    
    # Extraction des URLs et commandes
    urls = []
    files = []
    keywords = []
    
    sections = content.split('\n\n')
    for section in sections:
        if 'URLs et commandes:' in section:
            urls = [line.strip() for line in section.split('\n')[1:] if line.strip() and 'Aucune trouvée' not in line]
        elif 'Fichiers et chemins suspects:' in section:
            files = [line.strip() for line in section.split('\n')[1:] if line.strip() and 'Aucun trouvé' not in line]
        elif 'Mots-clés suspects:' in section:
            keywords = [line.strip() for line in section.split('\n')[1:] if line.strip() and 'Aucun trouvé' not in line]
    
    # Détermination du niveau de menace
    threat_level = 'safe'
    if 'Menace détectée' in content:
        threat_level = 'danger'
    elif len(urls) > 0 or len(files) > 0 or len(keywords) > 0:
        threat_level = 'warning'
    
    return {
        'strings': {
            'urls': urls,
            'files': files,
            'keywords': keywords
        },
        'clamav': {
            'infected': 'Menace détectée' in content,
            'summary': next((section for section in sections if 'SCAN SUMMARY' in section), '')
        },
        'binwalk': {
            'findings': [line.strip() for line in content.split('\n') if 'DECIMAL' in line or 'HEXADECIMAL' in line]
        },
        'threatLevel': threat_level
    }

@router.post("/analyze")
async def analyze_file(file: UploadFile = File(...)):
    try:
        # Génération d'un ID unique pour l'analyse
        analysis_id = str(uuid.uuid4())
        timestamp = datetime.now().isoformat()
        
        # Sauvegarde du fichier
        file_path = os.path.join(SAMPLES_DIR, file.filename)
        with open(file_path, 'wb') as f:
            content = await file.read()
            f.write(content)
        
        # Exécution du script d'analyse
        report_dir = os.path.join(REPORTS_DIR, f"{timestamp}_{file.filename}")
        subprocess.run(['./analyze_malware.sh', file_path], check=True)
        
        # Lecture des résultats
        report_path = os.path.join(report_dir, 'summary.txt')
        results = parse_analysis_results(report_path)
        
        # Mise à jour de l'historique
        history = load_history()
        history_entry = {
            'id': analysis_id,
            'filename': file.filename,
            'timestamp': timestamp,
            'threatLevel': results['threatLevel'],
            'summary': f"Trouvé: {len(results['strings']['urls'])} URLs, {len(results['strings']['files'])} fichiers suspects"
        }
        history.append(history_entry)
        save_history(history)
        
        return JSONResponse(content=results)
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/history")
async def get_history():
    try:
        return load_history()
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/history/{analysis_id}")
async def delete_analysis(analysis_id: str):
    try:
        history = load_history()
        history = [h for h in history if h['id'] != analysis_id]
        save_history(history)
        return {"message": "Analysis deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/analysis/{analysis_id}")
async def get_analysis_details(analysis_id: str):
    try:
        history = load_history()
        analysis = next((h for h in history if h['id'] == analysis_id), None)
        if not analysis:
            raise HTTPException(status_code=404, detail="Analysis not found")
            
        report_path = os.path.join(REPORTS_DIR, f"{analysis['timestamp']}_{analysis['filename']}", 'summary.txt')
        results = parse_analysis_results(report_path)
        return results
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e)) 